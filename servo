// Proyecto Digital - Parte A, B y C

// Daniela López

#include <Arduino.h>

// 1) DEFINICIÓN DE PINES
// (Ajustados para coincidir con Parte A+B)
#define PIN_SENSOR    34   // Entrada analógica para LM35
#define PIN_BOTON     15   // Botón para iniciar la lectura
#define PIN_ROJO      19   // LED rojo del semáforo  (A+B)
#define PIN_VERDE     23   // LED verde del semáforo (A+B)
#define PIN_AMARILLO  21   // LED amarillo           (A+B)
#define PIN_SERVO     13   // Servo motor que indica la temperatura

// 2) CONFIGURACIÓN DE PWM
// (Nombres de canales en minúscula como en A+B; misma freq/res)
#define canalrojo      8
#define canalverde     9
#define canalamarillo 10
#define canalservo     0   // Canal PWM para servo
#define freqPWM       50   // 50 Hz para LEDs y servo
#define resPWM        10   // Resolución de 10 bits (0..1023)

// 3) VARIABLES GLOBALES
// (Renombrado para coincidir con A+B; se conserva tu antirrebote)
volatile bool botonPresionado = false;    // Marca si el botón fue presionado
volatile unsigned long ultimoTiempo = 0;  // Último tiempo de pulsación válida (antirrebote)
const unsigned long DEBOUNCE_MS = 150;    // Tiempo mínimo entre pulsaciones para filtrar rebotes
float temperatura = 0;                    // Variable donde guardo la temperatura en °C

// 4) ISR DEL BOTÓN CON ANTIRREBOTE
void IRAM_ATTR botonISR() {
  unsigned long ahora = millis();           
  if (ahora - ultimoTiempo > DEBOUNCE_MS) { // Filtra rebotes mecánicos
    botonPresionado = true;                 // Marco que hay un evento pendiente
    ultimoTiempo = ahora;                   
  }
}

// 5) INICIALIZACIÓN DE LEDS Y SERVO
// (Misma función y lógica; solo cambian nombres de canales/pines)
void initLeds() {
  // LED rojo
  ledcSetup(canalrojo, freqPWM, resPWM);
  ledcAttachPin(PIN_ROJO, canalrojo);
  ledcWrite(canalrojo, 0); // Apagado

  // LED verde
  ledcSetup(canalverde, freqPWM, resPWM);
  ledcAttachPin(PIN_VERDE, canalverde);
  ledcWrite(canalverde, 0); // Apagado

  // LED amarillo
  ledcSetup(canalamarillo, freqPWM, resPWM);
  ledcAttachPin(PIN_AMARILLO, canalamarillo);
  ledcWrite(canalamarillo, 0); // Apagado

  // Servo motor
  ledcSetup(canalservo, freqPWM, resPWM);
  ledcAttachPin(PIN_SERVO, canalservo);
  ledcWrite(canalservo, 128); // Posición media inicial (aprox 90°)
}

// 6) FUNCION PARA ACTUALIZAR SEMÁFORO Y SERVO SEGÚN TEMPERATURA
// (Misma lógica; solo nombres de canales)
void actualizarSemaforoYServo(float t) {
  if (t < 22.0) {
    // Verde: t < 22°C
    ledcWrite(canalverde, 1023);   // LED verde encendido
    ledcWrite(canalamarillo, 0);   // Amarillo apagado
    ledcWrite(canalrojo, 0);       // Rojo apagado
    ledcWrite(canalservo, 128);    // Servo en 45° (aprox)
    Serial.println("Estado: VERDE, Servo 45°");
  }
  else if (t >= 22.0 && t < 25.0) {
    // Amarillo: 22°C ≤ t < 25°C
    ledcWrite(canalverde, 0);      
    ledcWrite(canalamarillo, 1023);
    ledcWrite(canalrojo, 0);
    ledcWrite(canalservo, 77);     // Servo en 90° (aprox)
    Serial.println("Estado: AMARILLO, Servo 90°");
  }
  else {
    // Rojo: t ≥ 25°C
    ledcWrite(canalverde, 0);
    ledcWrite(canalamarillo, 0);
    ledcWrite(canalrojo, 1023);
    ledcWrite(canalservo, 26);     // Servo en 135° (aprox)
    Serial.println("Estado: ROJO, Servo 135°");
  }
}

// 7) SETUP
void setup() {
  Serial.begin(115200);              // Inicia comunicación Serial
  pinMode(PIN_SENSOR, INPUT);        // LM35 como entrada analógica
  pinMode(PIN_BOTON, INPUT_PULLUP);  // Botón con pull-up interno
  attachInterrupt(PIN_BOTON, botonISR, FALLING); // Interrupción en flanco de bajada

  initLeds();                        // Inicializo LEDs y servo

  Serial.println("Listo: presiona el botón para leer temperatura y mover semáforo + servo.");
}

// 8) LOOP PRINCIPAL
void loop() {
  if (botonPresionado) {             // Si el botón fue presionado y validado
    botonPresionado = false;         // Limpio el evento para no repetirlo

    // LEER EL SENSOR LM35
    unsigned int lectura = analogRead(PIN_SENSOR);      // 0..4095 (12 bits ESP32)
    float voltaje = lectura * (5 / 4095.0);             // Paso a voltios
    temperatura = voltaje * 100.0;                      // °C (LM35: 10 mV/°C)

    // MOSTRAR POR SERIAL
    Serial.print("Temperatura: ");
    Serial.print(temperatura, 2);                       // Dos decimales
    Serial.println(" °C");

    // ACTUALIZAR SEMÁFORO Y SERVO
    actualizarSemaforoYServo(temperatura);
  }

  delay(1); // Pequeña pausa
}
