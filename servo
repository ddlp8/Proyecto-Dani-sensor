// Proyecto Digital - Parte A, B y C
// Daniela López

#include <Arduino.h>

// 1) DEFINICIÓN DE PINES
#define PIN_SENSOR    34   // Entrada analógica para LM35 (sensor de temperatura)
#define PIN_BOTON     15   // Botón para iniciar la lectura
#define PIN_ROJO      19   // LED rojo del semáforo  
#define PIN_VERDE     23   // LED verde del semáforo 
#define PIN_AMARILLO  21   // LED amarillo del semáforo        
#define PIN_SERVO     13   // Servo motor que indica la temperatura

// 2) CONFIGURACIÓN DE PWM
// El ESP32 maneja LEDs y servo con canales PWM. Defino un canal para cada color y uno para el servo.
#define canalrojo      8
#define canalverde     9
#define canalamarillo 10
#define canalservo     0   
#define freqPWM       50    // Frecuencia de 50 Hz (la misma que usan los servos)
#define resPWM        10    // Resolución de 10 bits → valores de 0 a 1023

// 3) VARIABLES GLOBALES
volatile bool botonPresionado = false;    // Marca si el botón fue presionado (bandera)
volatile unsigned long ultimoTiempo = 0;  // Último tiempo de pulsación válida (para antirrebote)
const unsigned long DEBOUNCE_MS = 150;    // Tiempo mínimo entre pulsaciones para filtrar rebotes
float temperatura = 0;                    // Aquí guardo la temperatura en grados Celsius

// 4) ISR DEL BOTÓN CON ANTIRREBOTE
// Esta función se ejecuta automáticamente cuando presiono el botón.
// Uso "millis()" para aplicar un antirrebote y evitar lecturas falsas.
void IRAM_ATTR botonISR() {
  unsigned long ahora = millis();           
  if (ahora - ultimoTiempo > DEBOUNCE_MS) { 
    botonPresionado = true;                 
    ultimoTiempo = ahora;                   
  }
}

// 5) INICIALIZACIÓN DE LEDS Y SERVO
// Configuro todos los LEDs y el servo en su canal PWM correspondiente.
void initLeds() {
  // LED rojo
  ledcSetup(canalrojo, freqPWM, resPWM);
  ledcAttachPin(PIN_ROJO, canalrojo);
  ledcWrite(canalrojo, 0); // Apagado al inicio

  // LED verde
  ledcSetup(canalverde, freqPWM, resPWM);
  ledcAttachPin(PIN_VERDE, canalverde);
  ledcWrite(canalverde, 0); // Apagado al inicio

  // LED amarillo
  ledcSetup(canalamarillo, freqPWM, resPWM);
  ledcAttachPin(PIN_AMARILLO, canalamarillo);
  ledcWrite(canalamarillo, 0); // Apagado al inicio

  // Servo motor
  ledcSetup(canalservo, freqPWM, resPWM);
  ledcAttachPin(PIN_SERVO, canalservo);
  ledcWrite(canalservo, 128); // Servo en posición inicial (aprox 90°)
}

// 6) FUNCIÓN PARA ACTUALIZAR SEMÁFORO Y SERVO SEGÚN TEMPERATURA
// Aquí defino la lógica del semáforo: 
// Verde = frío (<22°C), Amarillo = tibio (22-25°C), Rojo = caliente (≥25°C).
// Además, acompaño la señal visual con una posición del servo.
void actualizarSemaforoYServo(float t) {
  if (t < 22.0) {
    // Verde: frío
    ledcWrite(canalverde, 1023);   // Verde encendido
    ledcWrite(canalamarillo, 0);   
    ledcWrite(canalrojo, 0);       
    ledcWrite(canalservo, 128);    // Servo en 45° (aprox)
    Serial.println("Estado: VERDE, Servo 45°");
  }
  else if (t >= 22.0 && t < 25.0) {
    // Amarillo: intermedio
    ledcWrite(canalverde, 0);      
    ledcWrite(canalamarillo, 1023);
    ledcWrite(canalrojo, 0);
    ledcWrite(canalservo, 77);     // Servo en 90° (aprox)
    Serial.println("Estado: AMARILLO, Servo 90°");
  }
  else {
    // Rojo: caliente
    ledcWrite(canalverde, 0);
    ledcWrite(canalamarillo, 0);
    ledcWrite(canalrojo, 1023);
    ledcWrite(canalservo, 26);     // Servo en 135° (aprox)
    Serial.println("Estado: ROJO, Servo 135°");
  }
}

// 7) SETUP
void setup() {
  Serial.begin(115200);              // Comunicación serial para mostrar datos
  pinMode(PIN_SENSOR, INPUT);        // LM35 como entrada analógica
  pinMode(PIN_BOTON, INPUT_PULLUP);  // Botón con pull-up interno
  attachInterrupt(PIN_BOTON, botonISR, FALLING); // Detecto cuando presiono el botón

  initLeds();                        // Inicializo LEDs y servo

  Serial.println("Listo: presiona el botón para leer temperatura y mover semáforo + servo.");
}

// 8) LOOP PRINCIPAL
void loop() {
  if (botonPresionado) {             // Si presioné el botón
    botonPresionado = false;         // Limpio el evento

    // --- LEER EL SENSOR LM35 ---
    unsigned int lectura = analogRead(PIN_SENSOR);      // Valor 0..4095 (ADC de 12 bits del ESP32)
    float voltaje = lectura * (5.0 / 4095.0);           // Paso la lectura a voltaje
    temperatura = voltaje * 100.0;                      // El LM35 entrega 10mV por cada grado → lo convierto a °C

    // --- MOSTRAR POR SERIAL ---
    Serial.print("Temperatura: ");
    Serial.print(temperatura, 2);                       
    Serial.println(" °C");

    // --- ACTUALIZAR SEMÁFORO Y SERVO ---
    actualizarSemaforoYServo(temperatura);
  }

  delay(1); // Pequeña pausa para estabilidad
}
